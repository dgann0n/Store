<modification>
	<id>OPENTSHIRTS</id>
	<version>1.3c</version>
	<vqmver>2.5.0</vqmver>
	<author>joseandriani / modifed for OC 2.1+ by M7 (m7ws.com)</author>
	<file name="system/library/session.php">
		<operation>
			<search position="before"><![CDATA[session_start();]]></search>
			<add><![CDATA[
			if(isset($_REQUEST['session_id']))
			{
				session_id($_REQUEST['session_id']);
			}
			]]></add>
		</operation>
	</file>
	<file name="system/library/cart.php">
		<operation error="log">
			<search position="after" index="1"><![CDATA[$stock = true;]]></search>
			<add><![CDATA[
				$has_comp = $this->db->query(
					"SELECT id_composition FROM " . DB_PREFIX . "composition_to_cart_item WHERE cart_id = '" . (int)$cart['cart_id'] . "'"
				);
				if( $has_comp->num_rows ) {
					continue;
				}

			]]></add>
		</operation>
		<operation error="log">
			<search position="before"><![CDATA[public function update($cart_id, $quantity) {]]></search>
			<add><![CDATA[

	public function addPrintable($product_id, $quantity = 1, $option = array(), $recurring_id = 0, $id_composition) {
		$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "cart c INNER JOIN " . DB_PREFIX . "composition_to_cart_item cci ON c.cart_id = cci.cart_id WHERE customer_id = '" . (int)$this->customer->getId() . "' AND session_id = '" . $this->db->escape($this->session->getId()) . "' AND product_id = '" . (int)$product_id . "' AND id_composition = '" . $this->db->escape($id_composition) . "' AND `option` = '" . $this->db->escape(json_encode($option)) . "'");

		if (!$query->num_rows) {
			$item = $this->db->query("INSERT " . DB_PREFIX . "cart SET customer_id = '" . (int)$this->customer->getId() . "', session_id = '" . $this->db->escape($this->session->getId()) . "', product_id = '" . (int)$product_id . "', recurring_id = '" . (int)$recurring_id . "', `option` = '" . $this->db->escape(json_encode($option)) . "', quantity = '" . (int)$quantity . "', date_added = NOW()");
			$cart_id = $this->db->getLastId();
			$this->db->query("INSERT " . DB_PREFIX . "composition_to_cart_item SET id_composition = '" . $this->db->escape($id_composition) . "', cart_id = '" . (int)$cart_id . "' ");
		} else {
			$this->db->query("UPDATE " . DB_PREFIX . "cart c SET quantity = (quantity + " . (int)$quantity . "), `option` = '" . $this->db->escape(json_encode($option)) . "' WHERE customer_id = '" . (int)$this->customer->getId() . "' AND session_id = '" . $this->db->escape($this->session->getId()) . "' AND cart_id = '" . (int)$query->row['cart_id'] . "' ");
		}
	}

	public function addMiscPrintCharge($quantity = 1, $option = array(), $id_composition ) {
		$product_id = 99999999999;

		$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "cart c INNER JOIN " . DB_PREFIX . "composition_to_cart_item cci ON c.cart_id = cci.cart_id WHERE customer_id = '" . (int)$this->customer->getId() . "' AND session_id = '" . $this->db->escape($this->session->getId()) . "' AND product_id = '" . (int)$product_id . "' AND id_composition = '" . $this->db->escape($id_composition) . "';");// AND `option` = '" . $this->db->escape(json_encode($option)) . "'");

		if (!$query->num_rows) {
			$item = $this->db->query("INSERT " . DB_PREFIX . "cart SET customer_id = '" . (int)$this->customer->getId() . "', session_id = '" . $this->db->escape($this->session->getId()) . "', product_id = '" . (int)$product_id . "', recurring_id = '0', `option` = '" . $this->db->escape(json_encode($option)) . "', quantity = '" . (int)$quantity . "', date_added = NOW()");
			$cart_id = $this->db->getLastId();
			$this->db->query("INSERT " . DB_PREFIX . "composition_to_cart_item SET id_composition = '" . $this->db->escape($id_composition) . "', cart_id = '" . (int)$cart_id . "' ");
		} else {
			$this->db->query("UPDATE " . DB_PREFIX . "cart c SET quantity = (" . (int)$quantity . "), `option` = '" . $this->db->escape(json_encode($option)) . "' WHERE customer_id = '" . (int)$this->customer->getId() . "' AND session_id = '" . $this->db->escape($this->session->getId()) . "' AND cart_id = '" . (int)$query->row['cart_id'] . "' ");
		}
	}

			]]></add>
		</operation>
		<operation error="log">
			<search position="before" index="1" offset="1"><![CDATA[return $product_data;]]></search>
			<add><![CDATA[

		/* -------- CUSTOM CART --------- */

		foreach ($cart_query->rows as $product) {
			//continue;

			$comp_query = $this->db->query(
				"SELECT id_composition FROM " . DB_PREFIX . "composition_to_cart_item WHERE cart_id = '" . (int)$product['cart_id'] . "'"
			);

			if ( ! $comp_query->num_rows ) {
				continue;
			}


			$product_id = $product['product_id'];


			$id_composition = $comp_query->row['id_composition'];

			$stock = true;

			$quantity = $product['quantity'];

			// Options
			if (!empty($product['option'])) {
				$options = json_decode($product['option'],true);
			} else {
				$options = array();
			}


			// Profile
			if (!empty($product['recurring_id'])) {
				$recurring_id = $product['recurring_id'];
			} else {
				$recurring_id = 0;
			}

			$composition_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "composition c LEFT JOIN " . DB_PREFIX . "design d ON (c.id_composition = d.id_composition) WHERE c.id_composition = '" . $id_composition . "' AND c.deleted = '0' AND c.editable = '1' ");

			if ($composition_query->num_rows) {



				// Product Quantity Discounts
				$amount_products = 0;

				foreach ($cart_query->rows as $cart) {

					$comp_query = $this->db->query(
						"SELECT id_composition FROM " . DB_PREFIX . "composition_to_cart_item WHERE cart_id = '" . (int)$cart['cart_id'] . "'"
					);

					if ($comp_query->row['id_composition'] === $id_composition && $cart['product_id'] != 99999999999 ) {
						$amount_products += $cart['quantity'];
					}
				}


				// item is a misc. print charge (screens, digitizing, etc.)
				if ( $product_id == 99999999999 ) {
					$flag_remove = false;
					if ( $amount_products == 0 ){
						$flag_remove = true;
					}


					if ($flag_remove === true) {
						$this->remove($product['cart_id']);
					} else {
						$screen_charge = $options['price'];

						$product_data[] = array(
							'cart_id'         => $product['cart_id'],
							'id_composition'  => $composition_query->row['id_composition'],
							'product_id'      => $product_id,
							'name'            => 'Screen Charge for '.$composition_query->row['name'],
							'model'           => '',
							'shipping'        => 0,
							'image'           => 'data/printing_methods/screenprinting/screens.jpg',
							'option'          => array(),
							'download'        => array(),
							'quantity'        => $quantity,
							'minimum'         => 1,
							'subtract'        => 0,
							'stock'           => true,
							'price'           => $screen_charge,
							'total'           => $screen_charge * $quantity,
							'reward'          => 0,
							'points'          => 0,
							'tax_class_id'    => 0,
							'weight'          => 0,
							'weight_class_id' => $this->config->get('config_weight_class_id'),
							'length'          => 0,
							'width'           => 0,
							'height'          => 0,
							'length_class_id' => $this->config->get('config_length_class_id'),
			                'recurring'                 => $recurring,
			                'recurring_frequency'       => $recurring_frequency,
			                'recurring_price'           => $recurring_price,
			                'recurring_cycle'           => $recurring_cycle,
			                'recurring_duration'        => $recurring_duration,
			                'recurring_trial'           => $recurring_trial_status,
			                'recurring_trial_frequency' => $recurring_trial_frequency,
			                'recurring_trial_price'     => $recurring_trial_price,
			                'recurring_trial_cycle'     => $recurring_trial_cycle,
			                'recurring_trial_duration'  => $recurring_trial_duration
						);
					}

				// printable item
				} else {
					$flag_remove = false;

					$product_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "product p LEFT JOIN " . DB_PREFIX . "product_description pd ON (p.product_id = pd.product_id) WHERE p.product_id = '" . (int)$product_id . "' AND pd.language_id = '" . (int)$this->config->get('config_language_id') . "' AND p.date_available <= NOW() AND p.status = '1'");
					if(!$product_query->num_rows) {
						$this->remove($product['cart_id']);
					}
					$option_price = 0;
					$option_points = 0;
					$option_weight = 0;

					$option_data = array();



					$color_groups_prices = array();
					$query_quantity_index = $this->db->query("SELECT quantity_index FROM " . DB_PREFIX . "printable_product_quantity WHERE product_id='" . (int)$product_id . "' AND quantity <= " . (int)$amount_products . " ORDER BY quantity DESC LIMIT 1 ");
					if($query_quantity_index->num_rows==0) {
						$flag_remove = true;
					} else {
						$quantity_index = $query_quantity_index->row["quantity_index"]; //column to take prices from
						$query_price = $this->db->query("SELECT price, id_product_color_group FROM " . DB_PREFIX . "printable_product_quantity_price WHERE product_id='" . (int)$product_id . "' AND quantity_index='" . (int)$quantity_index . "' ");
						if($query_price->num_rows==0) {
							$flag_remove = true;
						} else {
							foreach ($query_price->rows as $result) {
								$color_groups_prices[$result['id_product_color_group']] = $result["price"];
							}
						}
					}

					$product_color_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "printable_product_color WHERE id_product_color = '" . $options['id_product_color']. "' AND deleted = '0'");
					if(!$product_color_query->num_rows) {
						$flag_remove = true;
					}
					$product_color_data = $product_color_query->row;

					// product color
					if(isset($color_groups_prices[$product_color_data['id_product_color_group']])) {
			    		$option_price += $color_groups_prices[$product_color_data['id_product_color_group']];
			    	}

					$option_data[] = array(
						'product_option_id'       => '',
						'product_option_value_id' => '',
						'option_id'               => '',
						'option_value_id'         => '',
						'name'                    => 'Product Color',
						'value'						=> $product_color_data['name'],
						'type'                    => '',
						'quantity'                => '',
						'subtract'                => '',
						'price'                   => '0',
						'price_prefix'            => '+',
						'points'                  => '0',
						'points_prefix'           => '+',
						'weight'                  => '0',
						'weight_prefix'           => '+'
					);

					$product_size_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "printable_product_size WHERE id_product_size = '" . $options['id_product_size']. "' AND deleted = '0'");
					if(!$product_size_query->num_rows) {
						$flag_remove = true;
					}
					$product_size_data = $product_size_query->row;

					$query = $this->db->query("SELECT id_product_size, upcharge FROM " . DB_PREFIX . "printable_product_size_upcharge WHERE product_id = '" . (int)$product_id . "' ");
					$upcharge = array();
					foreach ($query->rows as $result) {
						$upcharge[$result["id_product_size"]] = $result["upcharge"];
			    	}
			    	if(isset($upcharge[$options['id_product_size']])) {
			    		$option_price += $upcharge[$options['id_product_size']];
			    	}

					// product size
					$option_data[] = array(
						'product_option_id'       => '',
						'product_option_value_id' => '',
						'option_id'               => '',
						'option_value_id'         => '',
						'name'                    => 'Product Size',
						'value'            => $product_size_data['description'],
						'type'                    => '',
						'quantity'                => '',
						'subtract'                => '',
						'price'                   => (isset($upcharge[$options['id_product_size']]))?$upcharge[$options['id_product_size']]:'0',
						'price_prefix'            => '+',
						'points'                  => '0',
						'points_prefix'           => '+',
						'weight'                  => '0',
						'weight_prefix'           => '+'
					);


					// get printing price

					$print_product = array(
						'cart_id'			=> $product['cart_id'],
						'id_composition'	=> $id_composition,
						'total_quantity'	=> $amount_products,
						'option'			=> $options,

					);

					$class = preg_replace('/[^a-zA-Z0-9]/', '', $options['printing_method']) . 'Cart';

					if ( ! class_exists( $class ) ) {
						require_once(DIR_SYSTEM . 'library/' . $options['printing_method'] . "_cart.php");
					}

					$controller = new $class($this->config, $this->session, $this->db, $this);

					$printing_data = $controller->getPrintData($print_product);

					if($printing_data['flag_remove']) {
						$flag_remove = true;
					} else {
						$option_price += $printing_data['option_price'];
						$option_data = array_merge($option_data, $printing_data['option_data']);
					}


					if ($this->customer->isLogged()) {
						$customer_group_id = $this->customer->getGroupId();
					} else {
						$customer_group_id = $this->config->get('config_customer_group_id');
					}

					$price = 0;

					// Reward Points
					$product_reward_query = $this->db->query("SELECT points FROM " . DB_PREFIX . "product_reward WHERE product_id = '" . (int)$product_id . "' AND customer_group_id = '" . (int)$customer_group_id . "'");

					if ($product_reward_query->num_rows) {
						$reward = $product_reward_query->row['points'];
					} else {
						$reward = 0;
					}

					// Downloads
					$download_data = array();

					$recurring = false;
	                $recurring_frequency = 0;
	                $recurring_price = 0;
	                $recurring_cycle = 0;
	                $recurring_duration = 0;
	                $recurring_trial_status = 0;
	                $recurring_trial_price = 0;
	                $recurring_trial_cycle = 0;
	                $recurring_trial_duration = 0;
	                $recurring_trial_frequency = 0;
	                $profile_name = '';


					if ($flag_remove === true) {
						$this->remove($product['cart_id']);
					} else {
						$product_data[] = array(
							'cart_id'         => $product['cart_id'],
							'id_composition'  => $composition_query->row['id_composition'] ,
							'product_id'      => $product_query->row['product_id'],
							'name'            => $composition_query->row['name'] . ' on ' . $product_query->row['name'],
							'model'           => $product_query->row['model'],
							'shipping'        => $product_query->row['shipping'],
							'image'           => 'data/designs/design_' . $composition_query->rows[0]['id_design'] . '/snapshot.png',
							'option'          => $option_data,
							'download'        => $download_data,
							'quantity'        => $quantity,
							'minimum'         => $product_query->row['minimum'],
							'subtract'        => $product_query->row['subtract'],
							'stock'           => $stock,
							'price'           => ($price + $option_price),
							'total'           => ($price + $option_price) * $quantity,
							'reward'          => $reward * $quantity,
							'points'          => ($product_query->row['points'] ? ($product_query->row['points'] + $option_points) * $quantity : 0),
							'tax_class_id'    => $product_query->row['tax_class_id'],
							'weight'          => ($product_query->row['weight'] + $option_weight) * $quantity,
							'weight_class_id' => $product_query->row['weight_class_id'],
							'length'          => $product_query->row['length'],
							'width'           => $product_query->row['width'],
							'height'          => $product_query->row['height'],
							'length_class_id' => $product_query->row['length_class_id'],
	                        'recurring'                 => $recurring,
						);
					}
				}
			} else {
				$this->remove($product['cart_id']);
			}
		}

		/* -------- END CUSTOM CART --------- */
			]]></add>
		</operation>
	</file>
	<file name="catalog/controller/product/product.php">
		<operation>
			<search position="replace" offset="4"><![CDATA[if (file_exists(DIR_TEMPLATE . $this->config->get('config_template') . '/template/product/product.tpl')) {]]></search>
			<add><![CDATA[
			if (file_exists(DIR_TEMPLATE . $this->config->get('config_template') . '/template/product/product.tpl')) {
				$template = $this->config->get('config_template') . '/template/product/product.tpl';
			} else {
				$template = 'default/template/product/product.tpl';
			}

			$this->load->model('opentshirts/product');
			$is_printable = $this->model_opentshirts_product->isPrintable($this->request->get['product_id']);
			if($is_printable) {
				$this->load->language('opentshirts/product');

				$this->load->model('opentshirts/price_product');
				$this->load->model('opentshirts/product_color');
				$this->load->model('opentshirts/product_size');
				$data['price_matrix'] = $this->model_opentshirts_price_product->getPrice($this->request->get['product_id']);
				$data['quantities'] = $this->model_opentshirts_price_product->getQuantities($this->request->get['product_id']);
				$data['color_groups'] = $this->model_opentshirts_product_color->getColorGroups();

				$data['sizes_id'] = $this->model_opentshirts_product->getSizes($this->request->get['product_id']);
				$data['all_sizes'] = $this->model_opentshirts_product_size->getSizes();

				$data['text_price'] = $this->language->get('text_price');
				$data['text_sizes'] = $this->language->get('text_sizes');
				$data['text_quantities'] = $this->language->get('text_quantities');

				foreach($data['price_matrix'] as &$price_array) {
					foreach($price_array as &$price_value) {
						$price_value = $this->currency->format($price_value);
					}
					unset($price_value);
				}
				unset($price_array);

				$data['link_customize'] = $this->url->link('studio/home', 'product_id=' . $this->request->get['product_id']);

				$data['text_link_customize'] = $this->language->get('text_link_customize');

				if (file_exists(DIR_TEMPLATE . $this->config->get('config_template') . '/template/opentshirts/product.tpl')) {
					$template = $this->config->get('config_template') . '/template/opentshirts/product.tpl';
				} else {
					$template = 'default/template/opentshirts/product.tpl';
				}

			}

			$this->response->setOutput($this->load->view($template,$data));

			]]></add>
		</operation>
	</file>
	<file name="catalog/controller/product/category.php">
		<operation>
			<search position="replace" ><![CDATA[$data['products'][] = array(]]></search>
			<add><![CDATA[

				$this->load->language('opentshirts/product');
				$data['text_more_details'] = $this->language->get('text_more_details');
				$data['text_starting_at'] = $this->language->get('text_starting_at');

				$this->load->model('opentshirts/product');
				$is_printable = $this->model_opentshirts_product->isPrintable($result['product_id']);

				$data['products'][] = array(
					'is_printable'  => $is_printable,
					'link_customize'  => $this->url->link('studio/home', 'product_id=' . $result['product_id']),
			]]></add>
		</operation>
	</file>
	<file name="catalog/controller/product/search.php">
		<operation>
			<search position="replace" ><![CDATA[$data['products'][] = array(]]></search>
			<add><![CDATA[

				$this->load->language('opentshirts/product');
				$data['text_more_details'] = $this->language->get('text_more_details');
				$data['text_starting_at'] = $this->language->get('text_starting_at');

				$this->load->model('opentshirts/product');
				$is_printable = $this->model_opentshirts_product->isPrintable($result['product_id']);

				$data['products'][] = array(
					'is_printable'  => $is_printable,
					'link_customize'  => $this->url->link('studio/home', 'product_id=' . $result['product_id']),
			]]></add>
		</operation>
	</file>
	<file name="catalog/controller/account/account.php">
		<operation>
			<search position="before"><![CDATA[if (file_exists(DIR_TEMPLATE . $this->config->get('config_template') . '/template/account/account.tpl')) {]]></search>
			<add><![CDATA[

			$this->language->load('opentshirts/account');

			$data['text_my_designs'] = $this->language->get('text_my_designs');

    		$data['my_designs'] = $this->url->link('opentshirts/account/mydesigns', '', 'SSL');


			]]></add>
		</operation>
	</file>

	<file name="catalog/controller/checkout/confirm.php">
		<operation>
			<search position="after"><![CDATA[$order_data['products'][] = array(]]></search>
			<add><![CDATA[
					'cart_id' => $product['cart_id'],
			]]></add>
		</operation>
	</file>
	<file name="catalog/model/checkout/order.php">
		<operation error="log">
			<search position="after"><![CDATA[$order_product_id = $this->db->getLastId();]]></search>
			<add><![CDATA[

			$comp_query = $this->db->query(
				"SELECT id_composition FROM " . DB_PREFIX . "composition_to_cart_item WHERE cart_id = '" . (int)$product['cart_id'] . "'"
			);

			if ( $comp_query->num_rows ) {
				$this->load->model('opentshirts/composition_order');

				$this->model_opentshirts_composition_order->addCompositionToOrder($order_id, $comp_query->row['id_composition']);
				$this->model_opentshirts_composition_order->addCompositionToOrderItem($order_product_id, $comp_query->row['id_composition']);
			}

			]]></add>
		</operation>

		<operation>
			<search position="after"><![CDATA[$this->cache->delete('product');]]></search>
			<add><![CDATA[

			$this->load->model('opentshirts/composition_order');
			$this->load->model('opentshirts/composition');

			$compositions = $this->model_opentshirts_composition_order->getOrderCompositions($order_id);

			if($compositions) {
				foreach ($compositions as $value) {
					if(isset($value['id_composition'])) {
						$this->model_opentshirts_composition->setToNoEditableComposition($value['id_composition']);
					}
				}
			}

			]]></add>
		</operation>
	</file>
	<file name="admin/controller/sale/order.php">
		<operation error="log">
			<search position="before" index="2,3"><![CDATA[$data['header'] = $this->load->controller('common/header');]]></search>
			<add><![CDATA[

			$data['artwork'] = $this->load->controller('opentshirts/order/artwork');

			]]></add>
		</operation>
	</file>
	<file name="admin/view/template/sale/order_info.tpl">
		<operation>
			<search position="before" index="5"><![CDATA[<div class="panel panel-default">]]></search>
			<add><![CDATA[
				<?php if ( $artwork ) { ?>
				<?php echo $artwork; ?>
				<?php } ?>
			]]></add>
		</operation>
	</file>
	<file name="admin/view/template/common/menu.tpl">
		<operation>
			<search position="before"><![CDATA[<li id="sale">]]></search>
			<add><![CDATA[

					<li id="opentshirts"><a class="parent"><i class="fa fa-tint fa-fw"></i> <span><?php echo $text_ot_opentshirts; ?></span></a>
					    <ul>
						  <li><a href="<?php echo $ot_settings; ?>"><?php echo $text_ot_settings; ?></a></li>
					      <li><a class="parent"><?php echo $text_ot_product; ?></a>
					        <ul>
					          <li><a href="<?php echo $ot_product; ?>"><?php echo $text_ot_product; ?></a></li>
					          <li><a href="<?php echo $ot_product_color; ?>"><?php echo $text_ot_product_color; ?></a></li>
					          <li><a href="<?php echo $ot_product_size; ?>"><?php echo $text_ot_product_size; ?></a></li>
							  <li><a href="<?php echo $ot_product_import; ?>"><?php echo $text_ot_product_import; ?></a></li>
							  <li><a href="<?php echo $ot_product_export; ?>"><?php echo $text_ot_product_export; ?></a></li>
					        </ul>
					      </li>
					      <li><a class="parent"><?php echo $text_ot_art; ?></a>
					        <ul>
					          <li><a href="<?php echo $ot_clipart; ?>"><?php echo $text_ot_clipart; ?></a></li>
							  <li><a href="<?php echo $ot_bitmap; ?>"><?php echo $text_ot_bitmap; ?></a></li>
					          <li><a href="<?php echo $ot_clipart_category; ?>"><?php echo $text_ot_clipart_category; ?></a></li>
					      </ul>
					      </li>
					      <li><a class="parent"><?php echo $text_ot_font; ?></a>
					        <ul>
					          <li><a href="<?php echo $ot_font; ?>"><?php echo $text_ot_font; ?></a></li>
					          <li><a href="<?php echo $ot_font_category; ?>"><?php echo $text_ot_font_category; ?></a></li>
					        </ul>
					      </li>
					      <li><a class="parent"><?php echo $text_ot_composition; ?></a>
					        <ul>
					          <li><a href="<?php echo $ot_composition; ?>"><?php echo $text_ot_composition; ?></a></li>
					          <li><a href="<?php echo $ot_composition_category; ?>"><?php echo $text_ot_composition_category; ?></a></li>
					        </ul>
					      </li>
					      <li><a href="<?php echo $ot_printing_method; ?>"><?php echo $text_ot_printing_method; ?></a></li>
					      <li><a href="<?php echo $ot_design_color; ?>"><?php echo $text_ot_design_color; ?></a></li>
					      <li><a href="<?php echo $ot_installer; ?>"><?php echo $text_ot_installer; ?></a></li>
					      <li><a href="<?php echo $ot_about; ?>"><?php echo $text_ot_about; ?></a></li>
					    </ul>
					</li>

			]]></add>
		</operation>
	</file>
	<file name="admin/controller/common/menu.php">
		<operation>
			<search position="before"><![CDATA[return $this->load->view('common/menu.tpl', $data);]]></search>
			<add><![CDATA[
			$this->load->language('opentshirts/menu');

			$langitems = array(
				'text_ot_opentshirts',
				'text_ot_settings',
				'text_ot_art',
				'text_ot_bitmap',
				'text_ot_clipart',
				'text_ot_clipart_category',
				'text_ot_composition',
				'text_ot_composition_category',
				'text_ot_design_color',
				'text_ot_font',
				'text_ot_font_category',
				'text_ot_installer',
				'text_ot_product',
				'text_ot_product_color',
				'text_ot_product_size',
				'text_ot_printing_method',
				'text_ot_about',
				'text_ot_business_center',
				'text_ot_product_import',
				'text_ot_product_export',
			);

			foreach ( $langitems as $langitem ) {
				$data[$langitem] = $this->language->get($langitem);
			}

			$data['ot_settings'] = $this->url->link('module/opentshirts', 'token=' . $this->session->data['token'], 'SSL');
			$data['ot_bitmap'] = $this->url->link('bitmap/bitmap', 'token=' . $this->session->data['token'], 'SSL');
			$data['ot_bitmap_category'] = $this->url->link('bitmap/category', 'token=' . $this->session->data['token'], 'SSL');
			$data['ot_clipart'] = $this->url->link('clipart/clipart', 'token=' . $this->session->data['token'], 'SSL');
			$data['ot_clipart_category'] = $this->url->link('clipart/category', 'token=' . $this->session->data['token'], 'SSL');
			$data['ot_composition'] = $this->url->link('opentshirts/composition', 'token=' . $this->session->data['token'], 'SSL');
			$data['ot_composition_category'] = $this->url->link('opentshirts/composition_category', 'token=' . $this->session->data['token'], 'SSL');
			$data['ot_design_color'] = $this->url->link('design_color/design_color', 'token=' . $this->session->data['token'], 'SSL');
			$data['ot_font'] = $this->url->link('font/font', 'token=' . $this->session->data['token'], 'SSL');
			$data['ot_font_category'] = $this->url->link('font/category', 'token=' . $this->session->data['token'], 'SSL');
			$data['ot_installer'] = $this->url->link('content_pack/install', 'token=' . $this->session->data['token'], 'SSL');
			$data['ot_product'] = $this->url->link('product/product', 'token=' . $this->session->data['token'], 'SSL');
			$data['ot_product_color'] = $this->url->link('product/color', 'token=' . $this->session->data['token'], 'SSL');
			$data['ot_product_size'] = $this->url->link('product/size', 'token=' . $this->session->data['token'], 'SSL');
			$data['ot_printing_method'] = $this->url->link('extension/printing_method', 'token=' . $this->session->data['token'], 'SSL');
			$data['ot_about'] = $this->url->link('module/opentshirts', 'token=' . $this->session->data['token'].'&tab=about', 'SSL');
			$data['ot_business_center'] = $this->url->link('module/opentshirts', 'token=' . $this->session->data['token'].'&tab=business', 'SSL');
			$data['ot_product_import'] = $this->url->link('opentshirts/product_export/form', 'token=' . $this->session->data['token'], 'SSL');
			$data['ot_product_export'] = $this->url->link('opentshirts/product_export', 'token=' . $this->session->data['token'], 'SSL');

			]]></add>
		</operation>
	</file>
</modification>